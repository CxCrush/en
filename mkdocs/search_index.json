{
    "docs": [
        {
            "location": "/", 
            "text": "SDKBOX\n\n\n\n\nSDKBOX makes it super EASY for Cocos2d-x developers to integrate 3rd party SDKs into their games. We do all the hard, tedious and tricky work so that developers won\u2019t have to. All services are tested and certified. No matter which version of the game engine you are using, C++ or Javascript or Lua, SDKBOX has it covered\n\n\nInstaller\n\n\nSDKBOX Installer is a command line tool for install plugins to your cocos2d-x project, you can integrate a plugin with simply one command\ncheck out the \ngetting started guide\n\n\nIn-App Purchases\n\n\nSDKBOX IAP\n\n\nAd Units\n\n\nAdColony\n\n\nChartboost\n\n\nVungle\n\n\nAnalytics\n\n\nGoogle Analytics\n\n\nFlurry Analytics\n\n\nAttribution\n\n\nTune\n\n\nKochava", 
            "title": "Home"
        }, 
        {
            "location": "/#sdkbox", 
            "text": "SDKBOX makes it super EASY for Cocos2d-x developers to integrate 3rd party SDKs into their games. We do all the hard, tedious and tricky work so that developers won\u2019t have to. All services are tested and certified. No matter which version of the game engine you are using, C++ or Javascript or Lua, SDKBOX has it covered", 
            "title": "SDKBOX"
        }, 
        {
            "location": "/#installer", 
            "text": "SDKBOX Installer is a command line tool for install plugins to your cocos2d-x project, you can integrate a plugin with simply one command\ncheck out the  getting started guide", 
            "title": "Installer"
        }, 
        {
            "location": "/#in-app-purchases", 
            "text": "", 
            "title": "In-App Purchases"
        }, 
        {
            "location": "/#sdkbox-iap", 
            "text": "", 
            "title": "SDKBOX IAP"
        }, 
        {
            "location": "/#ad-units", 
            "text": "", 
            "title": "Ad Units"
        }, 
        {
            "location": "/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/#analytics", 
            "text": "", 
            "title": "Analytics"
        }, 
        {
            "location": "/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/#attribution", 
            "text": "", 
            "title": "Attribution"
        }, 
        {
            "location": "/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/installer/", 
            "text": "Getting Started with Installer\n\n\nSetup\n\n\nBefore you can run the SDKBOX installer you need to do a few things.\n\n make sure you know the path to where you downloaded the SDKBOX installer. (you can always put it in \n/usr/local/bin\n)\n\n make sure you know the path to where you downloaded the SDKBOX plugin bundles.\n\n\nInstalling a Plugin\n\n\nNow we are ready to install a plugin! There isn't much to it. Ready?\n\n\nInstalling for OS X\n\n\n\n\nFrom a command-line, \ncd\n to your applications root directory. Example:\n\n\n\n\ncd ~/MyGame\n\n\n\n\n\n\nNow, you can install your plugin using the SDKBOX installer, noting the locations of where you placed the installer and the plugin bundles. Example:\n\n\n\n\npath\n/sdkbox import -b ~/Downloads/sdkbox-iap_cpp_v1.1.tar.gz\n\n\n\n\nWhat Next?\n\n\nThe SDKBOX installer takes care of most of what you need. However, there are still a few manual steps that you must complete. After the installer runs it outputs a list of the remaining steps that you need to perform, referring to the plugin bundle PDF. Example output from running the above command:\n\n\n$ sdkbox -b ../sdkbox-iap_cpp_v1.1/ import\n _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\n Copyright \u00a9 2015 Chukong Technologies Inc. v0.1\n\n Remaining Manual Steps:\n Android Integration:\n Step 2.5 - modify Cocos2dxActivity.java\n Step 2.5 - modify YourGameName.java\n Cocos2d-JS specific\n Step 3.2 - add appropriate headers for this plugin to your class.\n Step 3.2 - add appropriate call to initialize the Javascript callbacks.\n Step 3.2 - call sdkbox.IAP.init(); where appropriate in your code. We recommend to do this in the app.js\n Installation Successful :)\n\n\n\n\nOther Installer switches.\n\n\nThe SDKBOX Installer has several switches that you can use. You can always see these by running \nsdkbox\n by itself or using the \n-h\n help switch:\n\n\n$ \npath\n/sdkbox\n _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\n Copyright \u00a9 2015 Chukong Technologies Inc. v0.1\n\nusage: sdkbox [-h] [-v] [-p PROJECT] [-b PLUGIN] [--yes] [--dryrun]\n              {import,restore,symbols,api}\n\n\n\n\n\n\n\n\n\n\nswitch\n\n\nalternate switch\n\n\nwhat it does\n\n\n\n\n\n\n\n\n\n\n-h\n\n\n--help\n\n\nshow this help message and exit\n\n\n\n\n\n\n-v\n\n\n--verbose\n\n\nspecify verbosity level\n\n\n\n\n\n\n-p PROJECT\n\n\n--project PROJECT\n\n\npath to project root (defaults to .)\n\n\n\n\n\n\n-b PLUGIN\n\n\n--plugin PLUGIN\n\n\nspecify path to plugin (defaults to .)\n\n\n\n\n\n\n\n\n--dryrun\n\n\ntest install before performing.\n\n\n\n\n\n\n\n\nStaying Up-to-date\n\n\nThe SDKBOX installer automatically checks for updates to itself. It will ask for your permission before updating. This will allow you to stay current and also automatically pull updates to your plugin bundles when they become available.\n\n\n _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\n Copyright \u00a9 2015 Chukong Technologies Inc. v0.1\n\nA newer version of SDKBOX is available, would you like to update to v0.5?\nPlease type Yes, No or Quit Yes\nupdated SDKBOX v0.1 to v0.5 at sdkbox", 
            "title": "Installer"
        }, 
        {
            "location": "/installer/#getting-started-with-installer", 
            "text": "", 
            "title": "Getting Started with Installer"
        }, 
        {
            "location": "/installer/#setup", 
            "text": "Before you can run the SDKBOX installer you need to do a few things.  make sure you know the path to where you downloaded the SDKBOX installer. (you can always put it in  /usr/local/bin )  make sure you know the path to where you downloaded the SDKBOX plugin bundles.", 
            "title": "Setup"
        }, 
        {
            "location": "/installer/#installing-a-plugin", 
            "text": "Now we are ready to install a plugin! There isn't much to it. Ready?  Installing for OS X   From a command-line,  cd  to your applications root directory. Example:   cd ~/MyGame   Now, you can install your plugin using the SDKBOX installer, noting the locations of where you placed the installer and the plugin bundles. Example:   path /sdkbox import -b ~/Downloads/sdkbox-iap_cpp_v1.1.tar.gz", 
            "title": "Installing a Plugin"
        }, 
        {
            "location": "/installer/#what-next", 
            "text": "The SDKBOX installer takes care of most of what you need. However, there are still a few manual steps that you must complete. After the installer runs it outputs a list of the remaining steps that you need to perform, referring to the plugin bundle PDF. Example output from running the above command:  $ sdkbox -b ../sdkbox-iap_cpp_v1.1/ import\n _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\n Copyright \u00a9 2015 Chukong Technologies Inc. v0.1\n\n Remaining Manual Steps:\n Android Integration:\n Step 2.5 - modify Cocos2dxActivity.java\n Step 2.5 - modify YourGameName.java\n Cocos2d-JS specific\n Step 3.2 - add appropriate headers for this plugin to your class.\n Step 3.2 - add appropriate call to initialize the Javascript callbacks.\n Step 3.2 - call sdkbox.IAP.init(); where appropriate in your code. We recommend to do this in the app.js\n Installation Successful :)", 
            "title": "What Next?"
        }, 
        {
            "location": "/installer/#other-installer-switches", 
            "text": "The SDKBOX Installer has several switches that you can use. You can always see these by running  sdkbox  by itself or using the  -h  help switch:  $  path /sdkbox\n _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\n Copyright \u00a9 2015 Chukong Technologies Inc. v0.1\n\nusage: sdkbox [-h] [-v] [-p PROJECT] [-b PLUGIN] [--yes] [--dryrun]\n              {import,restore,symbols,api}     switch  alternate switch  what it does      -h  --help  show this help message and exit    -v  --verbose  specify verbosity level    -p PROJECT  --project PROJECT  path to project root (defaults to .)    -b PLUGIN  --plugin PLUGIN  specify path to plugin (defaults to .)     --dryrun  test install before performing.", 
            "title": "Other Installer switches."
        }, 
        {
            "location": "/installer/#staying-up-to-date", 
            "text": "The SDKBOX installer automatically checks for updates to itself. It will ask for your permission before updating. This will allow you to stay current and also automatically pull updates to your plugin bundles when they become available.   _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\n Copyright \u00a9 2015 Chukong Technologies Inc. v0.1\n\nA newer version of SDKBOX is available, would you like to update to v0.5?\nPlease type Yes, No or Quit Yes\nupdated SDKBOX v0.1 to v0.5 at sdkbox", 
            "title": "Staying Up-to-date"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/", 
            "text": "Overview\n\n\nProvides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.\n\n\nIntegration\n\n\nUse the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import -b iap\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n\n\nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\n\n\nCall \nsdkbox::IAP::init();\n where appropriate in your code. We\nrecommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n\n\n#include \nPluginIAP/PluginIAP.h\n\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox::IAP::refresh()\n.\n\n\n\n\nonProductRequestSuccess\n will be trigged if retrieved successfully.\n\n\nonProductRequestFailure\n will be trigged if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox::IAP::purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox::IAP::restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\n\n\nAllow your class to extend \nsdkbox::IAPListener\n:\n\n\n\n\n    #include \nPluginIAP/PluginIAP.h\n\n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const\n p) override;\n        virtual void onFailure(sdkbox::Product const\n p, const std::string \nmsg)\n           override;\n        virtual void onCanceled(sdkbox::Product const\n p) override;\n        virtual void onRestored(sdkbox::Product const\n p) override;\n        virtual void onProductRequestSuccess(std::vector\nsdkbox::Product\n const \nproducts)\n        override;\n        virtual void onProductRequestFailure(const std::string \nmsg) override;\n    }\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::IAP::setListener(listener);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nstatic void setDebug(bool debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nstatic void purchase(const std::string\n name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nstatic void refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nstatic void restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nstatic void setListener(IAPListener* listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nvirtual void onSuccess(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nvirtual void onFailure(const Product\n p, const std::string\n msg) = 0;\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nvirtual void onCanceled(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nvirtual void onRestored(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nvirtual void onProductRequestSuccess(const std::vector\nProduct\n products) = 0;\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nvirtual void onProductRequestFailure(const std::string\n msg) = 0;\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#overview", 
            "text": "Provides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.", 
            "title": "Overview"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#integration", 
            "text": "Use the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import -b iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:  android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#usage", 
            "text": "Initialize IAP   Call  sdkbox::IAP::init();  where appropriate in your code. We\nrecommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:   #include  PluginIAP/PluginIAP.h   Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox::IAP::refresh() .   onProductRequestSuccess  will be trigged if retrieved successfully.  onProductRequestFailure  will be trigged if exception occurs.   Make a purchase  To make a purchase call  sdkbox::IAP::purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox::IAP::restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.   Allow your class to extend  sdkbox::IAPListener :       #include  PluginIAP/PluginIAP.h \n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const  p) override;\n        virtual void onFailure(sdkbox::Product const  p, const std::string  msg)\n           override;\n        virtual void onCanceled(sdkbox::Product const  p) override;\n        virtual void onRestored(sdkbox::Product const  p) override;\n        virtual void onProductRequestSuccess(std::vector sdkbox::Product  const  products)\n        override;\n        virtual void onProductRequestFailure(const std::string  msg) override;\n    }   Create a  listener  that handles callbacks:   sdkbox::IAP::setListener(listener);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#api-reference", 
            "text": "Methods  static void init();   Initialize SDKBox IAP   static void setDebug(bool debug);   Enable/disable debug logging   static void purchase(const std::string  name);   Make a purchase request   static void refresh();   Refresh the IAP data(title, price, description)   static void restore();   Restore purchase   static void setListener(IAPListener* listener);   Set listener for IAP   static void removeListener();   Remove listener for IAP   Listeners  virtual void onSuccess(const Product  p) = 0;   Called when an IAP processed successfully   virtual void onFailure(const Product  p, const std::string  msg) = 0;   Called when an IAP fails   virtual void onCanceled(const Product  p) = 0;   Called when user canceled the IAP   virtual void onRestored(const Product  p) = 0;   Called when server returns the IAP items user already purchased   virtual void onProductRequestSuccess(const std::vector Product  products) = 0;   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   virtual void onProductRequestFailure(const std::string  msg) = 0;   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v3-js/", 
            "text": "Overview\n\n\nProvides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.\n\n\nIntegration\n\n\nUse the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import -b iap\n\n\n\n\nExtra steps\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nCocos2dxActivity.java\n is located:\n\n\n/frameworks/js-bindings/cocos2d-x/cocos/platform/android/java/src/org/\ncocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\n\n\n\n\nCall \nsdkbox.IAP.init();\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n\n\n\n\n\n\nModify \nAppDelegate.cpp\n to include the following headers:\n\n\n\n\n\n\n#include \nPluginIAPJS.hpp\n\n#include \nPluginIAPJSHelper.hpp\n\n\n\n\n\n\n\nModify \nAppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginIAPJS);\nsc-\naddRegisterCallback(register_all_PluginIAPJS_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP.refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP.purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP.restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i \n products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP.init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP.setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP.purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP.refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP.restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP.setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP.removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nsdkbox.IAP.onSuccess(product);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nsdkbox.IAP.onFailure(product, message);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nsdkbox.IAP.onCanceled(product);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nsdkbox.IAP.onRestored(product);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nsdkbox.IAP.onProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nsdkbox.IAP.onProductRequestFailure(message);\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "js"
        }, 
        {
            "location": "/plugins/iap/v3-js/#overview", 
            "text": "Provides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.", 
            "title": "Overview"
        }, 
        {
            "location": "/plugins/iap/v3-js/#integration", 
            "text": "Use the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import -b iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-js/#extra-steps", 
            "text": "Modify  Cocos2dxActivity.java    Cocos2dxActivity.java  is located:  /frameworks/js-bindings/cocos2d-x/cocos/platform/android/java/src/org/\ncocos2dx/lib/Cocos2dxActivity.java    Modify  Cocos2dxActivity.java  to add the following imports:    import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v3-js/#usage", 
            "text": "Initialize IAP    Call  sdkbox.IAP.init();  where appropriate in your code. We\nrecommend to do this in the  app.js    Modify  AppDelegate.cpp  to include the following headers:    #include  PluginIAPJS.hpp \n#include  PluginIAPJSHelper.hpp    Modify  AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginIAPJS);\nsc- addRegisterCallback(register_all_PluginIAPJS_helper);  This registers the Javascript callbacks.  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP.refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP.purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP.restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i   products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-js/#api-reference", 
            "text": "Methods  sdkbox.IAP.init();   Initialize SDKBox IAP   sdkbox.IAP.setDebug(debug);   Enable/disable debug logging   sdkbox.IAP.purchase(name);   Make a purchase request   sdkbox.IAP.refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP.restore();   Restore purchase   sdkbox.IAP.setListener(listener);   Set listener for IAP   sdkbox.IAP.removeListener();   Remove listener for IAP   Listeners  sdkbox.IAP.onSuccess(product);   Called when an IAP processed successfully   sdkbox.IAP.onFailure(product, message);   Called when an IAP fails   sdkbox.IAP.onCanceled(product);   Called when user canceled the IAP   sdkbox.IAP.onRestored(product);   Called when server returns the IAP items user already purchased   sdkbox.IAP.onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   sdkbox.IAP.onProductRequestFailure(message);   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v3-lua/", 
            "text": "Overview\n\n\nProvides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.\n\n\nIntegration\n\n\nUse the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import -b iap\n\n\n\n\nExtra steps\n\n\nEdit \nCocos2dxActivity.java\n\n\n\n\n\n\nCocos2dxActivity.java\n is located:\n\n\n/frameworks/runtime-src/proj.android/src/org/cocos2dx/\n  lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \nlua_module_register.h\n to include the necessary headers and calls to register \nIAP\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginIAPLua.hpp\n\n#include \nPluginIAPLuaHelper.h\n\n\n\n\n\nregister_all_PluginIAPLua(L);\nregister_PluginIAPLua_helper(L);\n\n\n\n\nInitialize IAP\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.IAP:init();\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP:refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP:purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP:restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP:setListener(function(args)\n        if \nonSuccess\n == args.event then\n                local product = args.product\n                dump(product, \nonSuccess:\n)\n        elseif \nonFailure\n == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product, \nonFailure:\n)\n                print(\nmsg:\n, msg)\n        elseif \nonCanceled\n == args.event then\n                local product = args.product\n                dump(product, \nonCanceled:\n)\n        elseif \nonRestored\n == args.event then\n                local product = args.product\n                dump(product, \nonRestored:\n)\n        elseif \nonProductRequestSuccess\n == args.event then\n                local products = args.products\n                dump(products, \nonProductRequestSuccess:\n)\n        elseif \nonProductRequestFailure\n == args.event then\n                local msg = args.msg\n                print(\nmsg:\n, msg)\n        else\n                print(\nunknow event \n, args.event)\n        end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP:init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP:setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP:purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP:refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP:restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP:setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP:removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nsdkbox.IAP:onSuccess(product);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nsdkbox.IAP:onFailure(product, message);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nsdkbox.IAP:onCanceled(product);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nsdkbox.IAP:onRestored(product);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nsdkbox.IAP:onProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nsdkbox.IAP:onProductRequestFailure(message);\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#overview", 
            "text": "Provides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.", 
            "title": "Overview"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#integration", 
            "text": "Use the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import -b iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#extra-steps", 
            "text": "Edit  Cocos2dxActivity.java    Cocos2dxActivity.java  is located:  /frameworks/runtime-src/proj.android/src/org/cocos2dx/\n  lib/Cocos2dxActivity.java    Modify  Cocos2dxActivity.java  to add the following imports:    import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  lua_module_register.h  to include the necessary headers and calls to register  IAP  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginIAPLua.hpp \n#include  PluginIAPLuaHelper.h   register_all_PluginIAPLua(L);\nregister_PluginIAPLua_helper(L);  Initialize IAP   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.IAP:init();  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP:refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP:purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP:restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP:setListener(function(args)\n        if  onSuccess  == args.event then\n                local product = args.product\n                dump(product,  onSuccess: )\n        elseif  onFailure  == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product,  onFailure: )\n                print( msg: , msg)\n        elseif  onCanceled  == args.event then\n                local product = args.product\n                dump(product,  onCanceled: )\n        elseif  onRestored  == args.event then\n                local product = args.product\n                dump(product,  onRestored: )\n        elseif  onProductRequestSuccess  == args.event then\n                local products = args.products\n                dump(products,  onProductRequestSuccess: )\n        elseif  onProductRequestFailure  == args.event then\n                local msg = args.msg\n                print( msg: , msg)\n        else\n                print( unknow event  , args.event)\n        end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.IAP:init();   Initialize SDKBox IAP   sdkbox.IAP:setDebug(debug);   Enable/disable debug logging   sdkbox.IAP:purchase(name);   Make a purchase request   sdkbox.IAP:refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP:restore();   Restore purchase   sdkbox.IAP:setListener(listener);   Set listener for IAP   sdkbox.IAP:removeListener();   Remove listener for IAP   Listeners  sdkbox.IAP:onSuccess(product);   Called when an IAP processed successfully   sdkbox.IAP:onFailure(product, message);   Called when an IAP fails   sdkbox.IAP:onCanceled(product);   Called when user canceled the IAP   sdkbox.IAP:onRestored(product);   Called when server returns the IAP items user already purchased   sdkbox.IAP:onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   sdkbox.IAP:onProductRequestFailure(message);   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/", 
            "text": "Overview\n\n\nProvides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.\n\n\nIntegration\n\n\nUse the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import -b iap\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\n\n\nCall \nsdkbox::IAP::init();\n where appropriate in your code. We\nrecommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n\n\n#include \nPluginIAP/PluginIAP.h\n\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox::IAP::refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox::IAP::purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox::IAP::restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\n\n\nAllow your class to extend \nsdkbox::IAPListener\n:\n\n\n\n\n    #include \nPluginIAP/PluginIAP.h\n\n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const\n p) override;\n        virtual void onFailure(sdkbox::Product const\n p, const std::string \nmsg)\n           override;\n        virtual void onCanceled(sdkbox::Product const\n p) override;\n        virtual void onRestored(sdkbox::Product const\n p) override;\n        virtual void onProductRequestSuccess(std::vector\nsdkbox::Product\n const \nproducts)\n        override;\n        virtual void onProductRequestFailure(const std::string \nmsg) override;\n    }\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::IAP::setListener(listener);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nstatic void setDebug(bool debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nstatic void purchase(const std::string\n name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nstatic void refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nstatic void restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nstatic void setListener(IAPListener* listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nvirtual void onSuccess(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nvirtual void onFailure(const Product\n p, const std::string\n msg) = 0;\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nvirtual void onCanceled(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nvirtual void onRestored(const Product\n p) = 0;\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nvirtual void onProductRequestSuccess(const std::vector\nProduct\n products) = 0;\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nvirtual void onProductRequestFailure(const std::string\n msg) = 0;\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#overview", 
            "text": "Provides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.", 
            "title": "Overview"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#integration", 
            "text": "Use the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import -b iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#usage", 
            "text": "Initialize IAP   Call  sdkbox::IAP::init();  where appropriate in your code. We\nrecommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:   #include  PluginIAP/PluginIAP.h   Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox::IAP::refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox::IAP::purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox::IAP::restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.   Allow your class to extend  sdkbox::IAPListener :       #include  PluginIAP/PluginIAP.h \n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const  p) override;\n        virtual void onFailure(sdkbox::Product const  p, const std::string  msg)\n           override;\n        virtual void onCanceled(sdkbox::Product const  p) override;\n        virtual void onRestored(sdkbox::Product const  p) override;\n        virtual void onProductRequestSuccess(std::vector sdkbox::Product  const  products)\n        override;\n        virtual void onProductRequestFailure(const std::string  msg) override;\n    }   Create a  listener  that handles callbacks:   sdkbox::IAP::setListener(listener);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#api-reference", 
            "text": "Methods  static void init();   Initialize SDKBox IAP   static void setDebug(bool debug);   Enable/disable debug logging   static void purchase(const std::string  name);   Make a purchase request   static void refresh();   Refresh the IAP data(title, price, description)   static void restore();   Restore purchase   static void setListener(IAPListener* listener);   Set listener for IAP   static void removeListener();   Remove listener for IAP   Listeners  virtual void onSuccess(const Product  p) = 0;   Called when an IAP processed successfully   virtual void onFailure(const Product  p, const std::string  msg) = 0;   Called when an IAP fails   virtual void onCanceled(const Product  p) = 0;   Called when user canceled the IAP   virtual void onRestored(const Product  p) = 0;   Called when server returns the IAP items user already purchased   virtual void onProductRequestSuccess(const std::vector Product  products) = 0;   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   virtual void onProductRequestFailure(const std::string  msg) = 0;   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-js/", 
            "text": "Overview\n\n\nProvides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.\n\n\nIntegration\n\n\nUse the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import -b iap\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\n\n\n\n\nCall \nsdkbox.IAP.init();\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n\n\n\n\n\n\nModify \nAppDelegate.cpp\n to include the following headers:\n\n\n\n\n\n\n#include \nPluginIAPJS.hpp\n\n#include \nPluginIAPJSHelper.hpp\n\n\n\n\n\n\n\nModify \nAppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginIAPJS);\nsc-\naddRegisterCallback(register_all_PluginIAPJS_helper);\n\n\n\n\nThis registers the Javascript callbacks.\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP.refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP.purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP.restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i \n products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP.init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP.setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP.purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP.refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP.restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP.setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP.removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nsdkbox.IAP.onSuccess(product);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nsdkbox.IAP.onFailure(product, message);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nsdkbox.IAP.onCanceled(product);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nsdkbox.IAP.onRestored(product);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nsdkbox.IAP.onProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nsdkbox.IAP.onProductRequestFailure(message);\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "js"
        }, 
        {
            "location": "/plugins/iap/v2-js/#overview", 
            "text": "Provides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.", 
            "title": "Overview"
        }, 
        {
            "location": "/plugins/iap/v2-js/#integration", 
            "text": "Use the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import -b iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-js/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v2-js/#usage", 
            "text": "Initialize IAP    Call  sdkbox.IAP.init();  where appropriate in your code. We\nrecommend to do this in the  app.js    Modify  AppDelegate.cpp  to include the following headers:    #include  PluginIAPJS.hpp \n#include  PluginIAPJSHelper.hpp    Modify  AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginIAPJS);\nsc- addRegisterCallback(register_all_PluginIAPJS_helper);  This registers the Javascript callbacks.  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP.refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP.purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP.restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i   products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-js/#api-reference", 
            "text": "Methods  sdkbox.IAP.init();   Initialize SDKBox IAP   sdkbox.IAP.setDebug(debug);   Enable/disable debug logging   sdkbox.IAP.purchase(name);   Make a purchase request   sdkbox.IAP.refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP.restore();   Restore purchase   sdkbox.IAP.setListener(listener);   Set listener for IAP   sdkbox.IAP.removeListener();   Remove listener for IAP   Listeners  sdkbox.IAP.onSuccess(product);   Called when an IAP processed successfully   sdkbox.IAP.onFailure(product, message);   Called when an IAP fails   sdkbox.IAP.onCanceled(product);   Called when user canceled the IAP   sdkbox.IAP.onRestored(product);   Called when server returns the IAP items user already purchased   sdkbox.IAP.onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   sdkbox.IAP.onProductRequestFailure(message);   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-lua/", 
            "text": "Overview\n\n\nProvides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.\n\n\nIntegration\n\n\nUse the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.\n\n\nsdkbox import -b iap\n\n\n\n\nExtra steps\n\n\nModify \nYourGameName\n.java\n\n\n\n\nModify \nproj.android/src/\npackage identifier\n/\nYourGameName\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \nlua_module_register.h\n to include the necessary headers and calls to register \nIAP\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginIAPLua.hpp\n\n#include \nPluginIAPLuaHelper.hpp\n\n\n\n\n\n//Only get Lua state if it's not available\nlua_State *tolua_s = pStack-\ngetLuaState();\nregister_all_PluginIAPLua(tolua_s);\nregister_all_PluginIAPLua_helper(tolua_s);\n\n\n\n\nInitialize IAP\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.IAP:init();\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP:refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP:purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP:restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP:setListener(function(args)\n        if \nonSuccess\n == args.event then\n                local product = args.product\n                dump(product, \nonSuccess:\n)\n        elseif \nonFailure\n == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product, \nonFailure:\n)\n                print(\nmsg:\n, msg)\n        elseif \nonCanceled\n == args.event then\n                local product = args.product\n                dump(product, \nonCanceled:\n)\n        elseif \nonRestored\n == args.event then\n                local product = args.product\n                dump(product, \nonRestored:\n)\n        elseif \nonProductRequestSuccess\n == args.event then\n                local products = args.products\n                dump(products, \nonProductRequestSuccess:\n)\n        elseif \nonProductRequestFailure\n == args.event then\n                local msg = args.msg\n                print(\nmsg:\n, msg)\n        else\n                print(\nunknow event \n, args.event)\n        end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP:init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP:setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP:purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP:refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP:restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP:setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP:removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nsdkbox.IAP:onSuccess(product);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nsdkbox.IAP:onFailure(product, message);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nsdkbox.IAP:onCanceled(product);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nsdkbox.IAP:onRestored(product);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n\n\n\n\nsdkbox.IAP:onProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nsdkbox.IAP:onProductRequestFailure(message);\n\n\n\n\n\n\nCalled when the product request fails", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#overview", 
            "text": "Provides you one stop solution for IAP integration across multiple platform, SDKBOX IAP offers easy to use yet powerful API, really simplify the tedious process of implementing IAPs in your game.", 
            "title": "Overview"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#integration", 
            "text": "Use the following command to install SDKBOX IAP plugin, Make sure you setup SDKBOX installer correctly.  sdkbox import -b iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#extra-steps", 
            "text": "Modify  YourGameName .java   Modify  proj.android/src/ package identifier / YourGameName .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#usage", 
            "text": "Modify Lua Code  Modify  lua_module_register.h  to include the necessary headers and calls to register  IAP  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginIAPLua.hpp \n#include  PluginIAPLuaHelper.hpp   //Only get Lua state if it's not available\nlua_State *tolua_s = pStack- getLuaState();\nregister_all_PluginIAPLua(tolua_s);\nregister_all_PluginIAPLua_helper(tolua_s);  Initialize IAP   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.IAP:init();  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP:refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP:purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP:restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP:setListener(function(args)\n        if  onSuccess  == args.event then\n                local product = args.product\n                dump(product,  onSuccess: )\n        elseif  onFailure  == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product,  onFailure: )\n                print( msg: , msg)\n        elseif  onCanceled  == args.event then\n                local product = args.product\n                dump(product,  onCanceled: )\n        elseif  onRestored  == args.event then\n                local product = args.product\n                dump(product,  onRestored: )\n        elseif  onProductRequestSuccess  == args.event then\n                local products = args.products\n                dump(products,  onProductRequestSuccess: )\n        elseif  onProductRequestFailure  == args.event then\n                local msg = args.msg\n                print( msg: , msg)\n        else\n                print( unknow event  , args.event)\n        end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.IAP:init();   Initialize SDKBox IAP   sdkbox.IAP:setDebug(debug);   Enable/disable debug logging   sdkbox.IAP:purchase(name);   Make a purchase request   sdkbox.IAP:refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP:restore();   Restore purchase   sdkbox.IAP:setListener(listener);   Set listener for IAP   sdkbox.IAP:removeListener();   Remove listener for IAP   Listeners  sdkbox.IAP:onSuccess(product);   Called when an IAP processed successfully   sdkbox.IAP:onFailure(product, message);   Called when an IAP fails   sdkbox.IAP:onCanceled(product);   Called when user canceled the IAP   sdkbox.IAP:onRestored(product);   Called when server returns the IAP items user already purchased   sdkbox.IAP:onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   sdkbox.IAP:onProductRequestFailure(message);   Called when the product request fails", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/", 
            "text": "AdColony for c++\n\n\nAdColony for javascript\n\n\nAdColony for lua", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/#adcolony-for-c", 
            "text": "", 
            "title": "AdColony for c++"
        }, 
        {
            "location": "/plugins/adcolony/#adcolony-for-javascript", 
            "text": "", 
            "title": "AdColony for javascript"
        }, 
        {
            "location": "/plugins/adcolony/#adcolony-for-lua", 
            "text": "", 
            "title": "AdColony for lua"
        }, 
        {
            "location": "/plugins/chartboost/", 
            "text": "IAP for c++\n\n\nIAP for javascript\n\n\nIAP for lua", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/#iap-for-c", 
            "text": "", 
            "title": "IAP for c++"
        }, 
        {
            "location": "/plugins/chartboost/#iap-for-javascript", 
            "text": "", 
            "title": "IAP for javascript"
        }, 
        {
            "location": "/plugins/chartboost/#iap-for-lua", 
            "text": "", 
            "title": "IAP for lua"
        }, 
        {
            "location": "/plugins/vungle/", 
            "text": "IAP for c++\n\n\nIAP for javascript\n\n\nIAP for lua", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/#iap-for-c", 
            "text": "", 
            "title": "IAP for c++"
        }, 
        {
            "location": "/plugins/vungle/#iap-for-javascript", 
            "text": "", 
            "title": "IAP for javascript"
        }, 
        {
            "location": "/plugins/vungle/#iap-for-lua", 
            "text": "", 
            "title": "IAP for lua"
        }, 
        {
            "location": "/plugins/googleanalytics/", 
            "text": "IAP for c++\n\n\nIAP for javascript\n\n\nIAP for lua", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/#iap-for-c", 
            "text": "", 
            "title": "IAP for c++"
        }, 
        {
            "location": "/plugins/googleanalytics/#iap-for-javascript", 
            "text": "", 
            "title": "IAP for javascript"
        }, 
        {
            "location": "/plugins/googleanalytics/#iap-for-lua", 
            "text": "", 
            "title": "IAP for lua"
        }, 
        {
            "location": "/plugins/flurryanalytics/", 
            "text": "IAP for c++\n\n\nIAP for javascript\n\n\nIAP for lua", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/#iap-for-c", 
            "text": "", 
            "title": "IAP for c++"
        }, 
        {
            "location": "/plugins/flurryanalytics/#iap-for-javascript", 
            "text": "", 
            "title": "IAP for javascript"
        }, 
        {
            "location": "/plugins/flurryanalytics/#iap-for-lua", 
            "text": "", 
            "title": "IAP for lua"
        }, 
        {
            "location": "/plugins/tune/", 
            "text": "IAP for c++\n\n\nIAP for javascript\n\n\nIAP for lua", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/#iap-for-c", 
            "text": "", 
            "title": "IAP for c++"
        }, 
        {
            "location": "/plugins/tune/#iap-for-javascript", 
            "text": "", 
            "title": "IAP for javascript"
        }, 
        {
            "location": "/plugins/tune/#iap-for-lua", 
            "text": "", 
            "title": "IAP for lua"
        }, 
        {
            "location": "/plugins/kochava/", 
            "text": "IAP for c++\n\n\nIAP for javascript\n\n\nIAP for lua", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/#iap-for-c", 
            "text": "", 
            "title": "IAP for c++"
        }, 
        {
            "location": "/plugins/kochava/#iap-for-javascript", 
            "text": "", 
            "title": "IAP for javascript"
        }, 
        {
            "location": "/plugins/kochava/#iap-for-lua", 
            "text": "", 
            "title": "IAP for lua"
        }, 
        {
            "location": "/release-note/", 
            "text": "Release Notes\n\n\n\n\n1.1.5\n\n\nFix SDKBOX conflicts with Plugin-x\n\n\n1.1.4\n\n\nFix SDKBOX IAP plugin return invalid pricing data", 
            "title": "About"
        }, 
        {
            "location": "/release-note/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-note/#115", 
            "text": "Fix SDKBOX conflicts with Plugin-x", 
            "title": "1.1.5"
        }, 
        {
            "location": "/release-note/#114", 
            "text": "Fix SDKBOX IAP plugin return invalid pricing data", 
            "title": "1.1.4"
        }
    ]
}